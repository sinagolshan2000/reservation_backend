from rest_framework import serializers

from accounts.models import User
from reservation.models import *


class ReadOnlyUserSerializer(serializers.ModelSerializer):
    class Meta:
        model = User
        fields = ("email", "first_name", "last_name", "role")
        read_only_fields = ("email", "first_name", "last_name", "role")


class UserSerializer(serializers.ModelSerializer):
    class Meta:
        model = User
        fields = ("username", "password", "email", "first_name", "last_name", "role")

    def create(self, validated_data):
        user = User.objects.create_user(**validated_data)
        return user

    def to_representation(self, instance):
        representation = super(UserSerializer, self).to_representation(instance)
        representation.pop("password")
        return representation


class ReadOnlyCustomerSerializer(serializers.ModelSerializer):
    user = ReadOnlyUserSerializer(read_only=True)

    class Meta:
        model = Customer
        fields = ("user",)


class CustomerCreateUserSerializer(serializers.ModelSerializer):
    user = UserSerializer()

    class Meta:
        model = Customer
        fields = ("user",)

    def to_internal_value(self, data):
        try:
            data["user"]["username"] = self.get_initial()["user"]["email"]
            data["user"]["role"] = User.CUSTOMER
        except KeyError:
            pass  # proper response will be generated by serializer. need no further action
        return super(CustomerCreateUserSerializer, self).to_internal_value(data)

    def validate(self, attrs):
        user_serializer = UserSerializer(data=attrs.pop('user'))
        user_serializer.is_valid(raise_exception=True)
        self.context["user"] = user_serializer.save()
        return attrs

    def create(self, validated_data):
        validated_data["user"] = self.context["user"]
        customer = Customer.objects.create(**validated_data)
        return customer


class BusinessOwnerSerializer(serializers.ModelSerializer):
    user = UserSerializer()
    city_display = serializers.SerializerMethodField()
    job_display = serializers.SerializerMethodField()

    def get_city_display(self, obj):
        return obj.city.name

    def get_job_display(self, obj):
        return obj.job.name

    class Meta:
        model = BusinessOwner
        fields = "__all__"

    def to_representation(self, instance):
        representations = super().to_representation(instance)
        file_path: str = representations["profile_picture"]
        if file_path is not None:
            representations["profile_picture"] = file_path[file_path.index("media/") + len("media/"):]
        return representations


class UpdateBusinessOwnerSerializer(serializers.ModelSerializer):
    class Meta:
        model = BusinessOwner
        fields = ("self_description", "reservation_type", "address", "phone_number", "city", "location",
                  "default_appointment_duration", "default_appointment_price", "profile_picture")


class ListBusinessOwnerSerializer(serializers.ModelSerializer):
    user = UserSerializer()
    city_display = serializers.SerializerMethodField()
    job_display = serializers.SerializerMethodField()

    def get_city_display(self, obj):
        return obj.city.name

    def get_job_display(self, obj):
        return obj.job.name

    class Meta:
        model = BusinessOwner
        fields = ["id", "user", "self_description", "address", "phone_number", "city", "location", "job",
                  "profile_picture", "city_display", "job_display"]

    def to_representation(self, instance):
        representations = super().to_representation(instance)
        file_path: str = representations["profile_picture"]
        if file_path is not None:
            representations["profile_picture"] = file_path[file_path.index("media/") + len("media/"):]
        return representations


class BusinessOwnerCreateUserSerializer(serializers.ModelSerializer):
    user = UserSerializer()

    class Meta:
        model = BusinessOwner
        fields = ["user", "phone_number", "city", "job"]
        extra_kwargs = {'city': {'required': True}, 'job': {'required': True}}

    def to_internal_value(self, data):
        try:
            data["user"]["username"] = self.get_initial()["user"]["email"]
            data["user"]["role"] = User.BUSINESS_OWNER
        except KeyError:
            pass  # proper response will be generated by serializer. need no further action
        return super(BusinessOwnerCreateUserSerializer, self).to_internal_value(data)

    def validate(self, attrs):
        user_serializer = UserSerializer(data=attrs.pop('user'))
        user_serializer.is_valid(raise_exception=True)
        self.context["user"] = user_serializer.save()
        return attrs

    def create(self, validated_data):
        validated_data["user"] = self.context["user"]
        business_owner = BusinessOwner.objects.create(**validated_data)
        return business_owner


class CommentSerializer(serializers.ModelSerializer):
    commenter_username = serializers.CharField(source="commenter.user.username", read_only=True)

    class Meta:
        model = Comment
        fields = "__all__"


class PaymentPolicySerializer(serializers.ModelSerializer):
    class Meta:
        model = PaymentPolicy
        fields = ("reservation_percentage", "refund_percentage")


class BOFileSerializer(serializers.ModelSerializer):
    class Meta:
        model = BOFile
        fields = "__all__"
        read_only_fields = ("owner",)

    def create(self, validated_data):
        data = validated_data.copy()
        data["owner"] = self.context.get("owner")
        return super().create(validated_data=data)

    def to_representation(self, instance):
        representations = super().to_representation(instance)
        file_path: str = representations["file"]
        representations["file"] = file_path[file_path.index("media/") + len("media/"):]
        return representations
